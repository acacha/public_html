package org.nico.midlets.games;

import java.io.IOException;
import java.io.InputStream;
import javax.microedition.lcdui.Display;
import javax.microedition.media.*;
import javax.microedition.media.control.ToneControl;
import javax.microedition.midlet.MIDlet;

/**
 * <p>Title: Sudoku</p>
 * <p>Description: Juego japones</p>
 * <p>Comments: Version recursiva</p>
 * <p>Date: 06/07/06</p>
 * <p>Last update: 06/07/06</p>
 * @author Pep Mendez
 * @version 3.1.0
 */
public class Sudoku extends MIDlet implements ISudokuConstants {
  private static Sudoku instance;
  private Display display = null;
  private SudokuDisplay displayable = new SudokuDisplay();
  private final boolean VERSION_FINAL = false;

  public Sudoku() {
    instance = this;
  }

  public void startApp() {
    if (display == null) {
      display = Display.getDisplay(this);
      new SudokuSplash(display, displayable);
    }
//    Display.getDisplay(this).setCurrent(displayable);
    /*
     Supported common media
     Wave audio files: audio/x-wav
     AU audio files: audio/basic
     MP3 audio files: audio/mpeg
     MIDI files: audio/midi
     Tone sequences: audio/x-tone-seq
     */
    new Thread() {
      public void run() {
        try {
          InputStream is = this.getClass().getResourceAsStream(SUDOKU_GAME_URL);
          Player p = Manager.createPlayer(is, "audio/x-wav");
          p.start();
        }
        catch (Exception ex) {
          ex.printStackTrace();
        }
      }
    }.start();
    if (VERSION_FINAL) {
      // toca melodia, del libro j2me java 2 micro edition
      new Thread() {
        public void run() {
          byte[] melodia = {
              ToneControl.VERSION, 1,
              ToneControl.TEMPO, 22,
              ToneControl.BLOCK_START, 0,
              60, 8, 62, 4, 64, 4, 65, 4, 67, 4, 69, 4, 71, 4,
              72, 4, 74, 4, 76, 4, 77, 4, 79, 4, 81, 4, 83, 4, 84, 4,
              83, 4, 81, 4, 80, 4, 81, 4, 86, 4, 84, 4, 83, 4, 81, 4,
              81, 4, 79, 4, 78, 4, 79, 4, 60, 4, 79, 4, 88, 4, 79, 4,
              57, 4, 77, 4, 88, 4, 77, 4, 59, 4, 77, 4, 86, 4, 77, 4,
              56, 4, 76, 4, 86, 4, 76, 4, 57, 4, 76, 4, 84, 4, 76, 4,
              53, 4, 74, 4, 84, 4, 74, 4, 55, 4, 74, 4, 83, 4, 74, 4,
              84, 16, ToneControl.SILENCE, 16,
              ToneControl.BLOCK_END, 0,
              ToneControl.BLOCK_START, 1,
              79, 4, 84, 4, 88, 4, 86, 4, 84, 4, 83, 4, 81, 4, 79, 4,
              77, 4, 76, 4, 74, 4, 72, 4, 71, 4, 69, 4, 67, 4, 65, 4,
              64, 8, 76, 8, 77, 8, 78, 8,
              79, 12, 76, 4, 74, 8, ToneControl.SILENCE, 8,
              ToneControl.BLOCK_END, 1,
              ToneControl.SET_VOLUME, 100, ToneControl.PLAY_BLOCK, 0,
              ToneControl.SET_VOLUME, 50, ToneControl.PLAY_BLOCK, 0,
              ToneControl.SET_VOLUME, 100, ToneControl.PLAY_BLOCK, 1,
              ToneControl.SET_VOLUME, 50, ToneControl.PLAY_BLOCK, 1,
              ToneControl.SET_VOLUME, 100, ToneControl.PLAY_BLOCK, 0,
          };
          try {
            Player player = Manager.createPlayer(Manager.TONE_DEVICE_LOCATOR);
            // inicializacion y acaparacion de recursos
            // the realize method transitions the Player from the UNREALIZED state to the REALIZED state
            // A Player is in the REALIZED state when it has obtained the information required to acquire the media resources. Realizing a Player can be a resource and time consuming process. The Player may have to communicate with a server, read a file, or interact with a set of objects.
            player.realize();
            // once a Player is in the PREFETCHED state, it may be started. Prefetching reduces the startup latency of a Player to the minimum possible value.
            //          player.prefetch(); // dont use here
            // -1 for ever
            player.setLoopCount( -1);
            // obtenemos control para reproducir secuencias
            ToneControl control = (ToneControl) player.getControl(
                "javax.microedition.media.control.ToneControl");
            // asignamos la melodia a reproducir
            control.setSequence(melodia);
            // suena la melodia
            // once prefetched, a Player can enter the STARTED state by calling the start method. A STARTED Player  means the Player is running and processing data. A Player returns to the PREFETCHED state when it stops, because the stop method was invoked, or it has reached the end of the media.
            player.start();
          }
          catch (IOException ex) {
            ex.printStackTrace();
          }
          catch (MediaException ex) {
            ex.printStackTrace();
          }
        }
      }.start();
    }
    else {
      // toca melodia, del libro j2me java 2 micro edition reducida
      new Thread() {
        public void run() {
          byte[] melodia = {
              ToneControl.VERSION, 1,
              ToneControl.TEMPO, 22,
              ToneControl.BLOCK_START, 0,
              60, 8, 62, 4, 64, 4, 65, 4, 67, 4, 69, 4, 71, 4,
              72, 4, 74, 4, 76, 4, 77, 4, 79, 4, 81, 4, 83, 4, 84, 4,
              83, 4, 81, 4, 80, 4, 81, 4, 86, 4, 84, 4, 83, 4, 81, 4,
              81, 4, 79, 4, 78, 4, 79, 4, 60, 4, 79, 4, 88, 4, 79, 4,
              57, 4, 77, 4, 88, 4, 77, 4, 59, 4, 77, 4, 86, 4, 77, 4,
              56, 4, 76, 4, 86, 4, 76, 4, 57, 4, 76, 4, 84, 4, 76, 4,
              53, 4, 74, 4, 84, 4, 74, 4, 55, 4, 74, 4, 83, 4, 74, 4,
              84, 16, ToneControl.SILENCE, 16,
              ToneControl.BLOCK_END, 0,
              ToneControl.BLOCK_START, 1,
              79, 4, 84, 4, 88, 4, 86, 4, 84, 4, 83, 4, 81, 4, 79, 4,
              77, 4, 76, 4, 74, 4, 72, 4, 71, 4, 69, 4, 67, 4, 65, 4,
              64, 8, 76, 8, 77, 8, 78, 8,
              79, 12, 76, 4, 74, 8, ToneControl.SILENCE, 8,
              ToneControl.BLOCK_END, 1,
//              ToneControl.SET_VOLUME,100,ToneControl.PLAY_BLOCK,0,
//              ToneControl.SET_VOLUME, 50,ToneControl.PLAY_BLOCK,0,
//              ToneControl.SET_VOLUME,100,ToneControl.PLAY_BLOCK,1,
              ToneControl.SET_VOLUME, 50, ToneControl.PLAY_BLOCK, 1,
//              ToneControl.SET_VOLUME,100,ToneControl.PLAY_BLOCK,0,
          };
          try {
            Player player = Manager.createPlayer(Manager.TONE_DEVICE_LOCATOR);
            // inicializacion y acaparacion de recursos
            // the realize method transitions the Player from the UNREALIZED state to the REALIZED state
            // A Player is in the REALIZED state when it has obtained the information required to acquire the media resources. Realizing a Player can be a resource and time consuming process. The Player may have to communicate with a server, read a file, or interact with a set of objects.
            player.realize();
            // once a Player is in the PREFETCHED state, it may be started. Prefetching reduces the startup latency of a Player to the minimum possible value.
            //          player.prefetch(); // dont use here
            // -1 for ever
//            player.setLoopCount(-1);
            // obtenemos control para reproducir secuencias
            ToneControl control = (ToneControl) player.getControl(
                "javax.microedition.media.control.ToneControl");
            // asignamos la melodia a reproducir
            control.setSequence(melodia);
            // suena la melodia
            // once prefetched, a Player can enter the STARTED state by calling the start method. A STARTED Player  means the Player is running and processing data. A Player returns to the PREFETCHED state when it stops, because the stop method was invoked, or it has reached the end of the media.
            player.start();
          }
          catch (IOException ex) {
            ex.printStackTrace();
          }
          catch (MediaException ex) {
            ex.printStackTrace();
          }
        }
      }.start();
    }
  }

  public void pauseApp() {
  }

  public void destroyApp(boolean unconditional) {
  }

  public static void quitApp() {
    instance.destroyApp(true);
    instance.notifyDestroyed();
    instance = null;
  }

  public static Sudoku getInstance() {
    return instance;
  }

  public SudokuDisplay getDisplayable() {
    return displayable;
  }

}
