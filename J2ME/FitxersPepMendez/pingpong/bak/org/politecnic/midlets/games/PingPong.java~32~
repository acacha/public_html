package org.politecnic.midlets.games;

import javax.microedition.lcdui.Display;
import javax.microedition.midlet.MIDlet;
import javax.microedition.media.Player;
import javax.microedition.media.Manager;
import javax.microedition.media.protocol.DataSource;
import java.io.InputStream;
import javax.microedition.media.control.ToneControl;
import java.io.IOException;
import javax.microedition.media.MediaException;
import org.nico.midlets.games.pingpong.view.*;

/**
 * <p>Title: Ping Pong Game </p>
 * <p>Description: Ping pong interactivo para dispositivos moviles</p>
 * <p>Comments: CLDL 1.1 MIDP 2.0</p>
 * <p>Media Supported Protocols: device, http, file and capture</p>
 * <p>Supported Content Type: audio/x-tone-seq, audio/x-wav, audio/midi, audio/sp_midi, image/gif, video/mpeg and video/vnd.sun.rgb565
 * <p>Date: 12/03/06 </p>
 * @author Pep Mendez
 * @version 1.0
 */
public class PingPong
    extends MIDlet {
  private static PingPong instance;
  private PingPongTable displayable = null;
  private final boolean VERSION_FINAL = false;

  public PingPong() {
    instance = this;
  }

  public void startApp() {
    if (displayable == null) {
      displayable = new PingPongTable();
      Display.getDisplay(this).setCurrent(displayable);
      // mi voz, 'ping pong game'
      new Thread() {
        public void run() {
          try {
            final String url = "/org/politecnic/midlets/games/pingponggame.wav";
            InputStream is = this.getClass().getResourceAsStream(url);
            Player p = Manager.createPlayer(is, "audio/x-wav");
            p.start();
          }
          catch (Exception ex) {
            ex.printStackTrace();
          }
        }
      }.start();
      if (VERSION_FINAL) {
        // toca melodia, del libro j2me java 2 micro edition
        new Thread() {
          public void run() {
            byte[] melodia = {
                ToneControl.VERSION, 1,
                ToneControl.TEMPO, 22,
                ToneControl.BLOCK_START, 0,
                60, 8, 62, 4, 64, 4, 65, 4, 67, 4, 69, 4, 71, 4,
                72, 4, 74, 4, 76, 4, 77, 4, 79, 4, 81, 4, 83, 4, 84, 4,
                83, 4, 81, 4, 80, 4, 81, 4, 86, 4, 84, 4, 83, 4, 81, 4,
                81, 4, 79, 4, 78, 4, 79, 4, 60, 4, 79, 4, 88, 4, 79, 4,
                57, 4, 77, 4, 88, 4, 77, 4, 59, 4, 77, 4, 86, 4, 77, 4,
                56, 4, 76, 4, 86, 4, 76, 4, 57, 4, 76, 4, 84, 4, 76, 4,
                53, 4, 74, 4, 84, 4, 74, 4, 55, 4, 74, 4, 83, 4, 74, 4,
                84, 16, ToneControl.SILENCE, 16,
                ToneControl.BLOCK_END, 0,
                ToneControl.BLOCK_START, 1,
                79, 4, 84, 4, 88, 4, 86, 4, 84, 4, 83, 4, 81, 4, 79, 4,
                77, 4, 76, 4, 74, 4, 72, 4, 71, 4, 69, 4, 67, 4, 65, 4,
                64, 8, 76, 8, 77, 8, 78, 8,
                79, 12, 76, 4, 74, 8, ToneControl.SILENCE, 8,
                ToneControl.BLOCK_END, 1,
                ToneControl.SET_VOLUME, 100, ToneControl.PLAY_BLOCK, 0,
                ToneControl.SET_VOLUME, 50, ToneControl.PLAY_BLOCK, 0,
                ToneControl.SET_VOLUME, 100, ToneControl.PLAY_BLOCK, 1,
                ToneControl.SET_VOLUME, 50, ToneControl.PLAY_BLOCK, 1,
                ToneControl.SET_VOLUME, 100, ToneControl.PLAY_BLOCK, 0,
            };
            try {
              Player player = Manager.createPlayer(Manager.TONE_DEVICE_LOCATOR);
              // inicializacion y acaparacion de recursos
              // the realize method transitions the Player from the UNREALIZED state to the REALIZED state
              // A Player is in the REALIZED state when it has obtained the information required to acquire the media resources. Realizing a Player can be a resource and time consuming process. The Player may have to communicate with a server, read a file, or interact with a set of objects.
              player.realize();
              // once a Player is in the PREFETCHED state, it may be started. Prefetching reduces the startup latency of a Player to the minimum possible value.
              //          player.prefetch(); // dont use here
              // -1 for ever
              player.setLoopCount( -1);
              // obtenemos control para reproducir secuencias
              ToneControl control = (ToneControl) player.getControl(
                  "javax.microedition.media.control.ToneControl");
              // asignamos la melodia a reproducir
              control.setSequence(melodia);
              // suena la melodia
              // once prefetched, a Player can enter the STARTED state by calling the start method. A STARTED Player  means the Player is running and processing data. A Player returns to the PREFETCHED state when it stops, because the stop method was invoked, or it has reached the end of the media.
              player.start();
            }
            catch (IOException ex) {
              ex.printStackTrace();
            }
            catch (MediaException ex) {
              ex.printStackTrace();
            }
          }
        }.start();
      }
      else {
        // toca melodia, del libro j2me java 2 micro edition reducida
        new Thread() {
          public void run() {
            byte[] melodia = {
                ToneControl.VERSION, 1,
                ToneControl.TEMPO, 22,
                ToneControl.BLOCK_START, 0,
                60, 8, 62, 4, 64, 4, 65, 4, 67, 4, 69, 4, 71, 4,
                72, 4, 74, 4, 76, 4, 77, 4, 79, 4, 81, 4, 83, 4, 84, 4,
                83, 4, 81, 4, 80, 4, 81, 4, 86, 4, 84, 4, 83, 4, 81, 4,
                81, 4, 79, 4, 78, 4, 79, 4, 60, 4, 79, 4, 88, 4, 79, 4,
                57, 4, 77, 4, 88, 4, 77, 4, 59, 4, 77, 4, 86, 4, 77, 4,
                56, 4, 76, 4, 86, 4, 76, 4, 57, 4, 76, 4, 84, 4, 76, 4,
                53, 4, 74, 4, 84, 4, 74, 4, 55, 4, 74, 4, 83, 4, 74, 4,
                84, 16, ToneControl.SILENCE, 16,
                ToneControl.BLOCK_END, 0,
                ToneControl.BLOCK_START, 1,
                79, 4, 84, 4, 88, 4, 86, 4, 84, 4, 83, 4, 81, 4, 79, 4,
                77, 4, 76, 4, 74, 4, 72, 4, 71, 4, 69, 4, 67, 4, 65, 4,
                64, 8, 76, 8, 77, 8, 78, 8,
                79, 12, 76, 4, 74, 8, ToneControl.SILENCE, 8,
                ToneControl.BLOCK_END, 1,
//              ToneControl.SET_VOLUME,100,ToneControl.PLAY_BLOCK,0,
//              ToneControl.SET_VOLUME, 50,ToneControl.PLAY_BLOCK,0,
//              ToneControl.SET_VOLUME,100,ToneControl.PLAY_BLOCK,1,
                ToneControl.SET_VOLUME, 50, ToneControl.PLAY_BLOCK, 1,
//              ToneControl.SET_VOLUME,100,ToneControl.PLAY_BLOCK,0,
            };
            try {
              Player player = Manager.createPlayer(Manager.TONE_DEVICE_LOCATOR);
              // inicializacion y acaparacion de recursos
              // the realize method transitions the Player from the UNREALIZED state to the REALIZED state
              // A Player is in the REALIZED state when it has obtained the information required to acquire the media resources. Realizing a Player can be a resource and time consuming process. The Player may have to communicate with a server, read a file, or interact with a set of objects.
              player.realize();
              // once a Player is in the PREFETCHED state, it may be started. Prefetching reduces the startup latency of a Player to the minimum possible value.
              //          player.prefetch(); // dont use here
              // -1 for ever
//            player.setLoopCount(-1);
              // obtenemos control para reproducir secuencias
              ToneControl control = (ToneControl) player.getControl(
                  "javax.microedition.media.control.ToneControl");
              // asignamos la melodia a reproducir
              control.setSequence(melodia);
              // suena la melodia
              // once prefetched, a Player can enter the STARTED state by calling the start method. A STARTED Player  means the Player is running and processing data. A Player returns to the PREFETCHED state when it stops, because the stop method was invoked, or it has reached the end of the media.
              player.start();
            }
            catch (IOException ex) {
              ex.printStackTrace();
            }
            catch (MediaException ex) {
              ex.printStackTrace();
            }
          }
        }.start();
      }
    }

//**********
     // toca melodia de la propia api
     // "Mary Had A Little Lamb" has "ABAC" structure.
     // Use block to repeat "A" section.
//     new Thread() {
//       public void run() {
//
//
//            byte tempo = 30; // set tempo to 120 bpm
//            byte d = 8;      // eighth-note
//
//            byte C4 = ToneControl.C4;;
//            byte D4 = (byte)(C4 + 2); // a whole step
//            byte E4 = (byte)(C4 + 4); // a major third
//            byte G4 = (byte)(C4 + 7); // a fifth
//            byte rest = ToneControl.SILENCE; // rest
//
//            byte[] mySequence = {
//                ToneControl.VERSION, 1,   // version 1
//                ToneControl.TEMPO, tempo, // set tempo
//                ToneControl.BLOCK_START, 0,   // start define "A" section
//                E4,d, D4,d, C4,d, E4,d,       // content of "A" section
//                E4,d, E4,d, E4,d, rest,d,
//                ToneControl.BLOCK_END, 0,     // end define "A" section
//                ToneControl.PLAY_BLOCK, 0,    // play "A" section
//                D4,d, D4,d, D4,d, rest,d,     // play "B" section
//                E4,d, G4,d, G4,d, rest,d,
//                ToneControl.PLAY_BLOCK, 0,    // repeat "A" section
//                D4,d, D4,d, E4,d, D4,d, C4,d  // play "C" section
//            };
//            try{
//                Player p = Manager.createPlayer(Manager.TONE_DEVICE_LOCATOR);
//                p.realize();
//                ToneControl c = (ToneControl)p.getControl("ToneControl");
//                c.setSequence(mySequence);
//                p.start();
//            } catch (IOException ioe) {
//            } catch (MediaException me) {
//       }
//     }.start();

//**********
  }

  public void pauseApp() {
  }

  public void destroyApp(boolean unconditional) {
  }

  public static void quitApp() {
    instance.destroyApp(true);
    instance.notifyDestroyed();
    instance = null;
  }

  public static PingPong getInstance() {
    return instance;
  }

}
